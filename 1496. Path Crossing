class Solution {
public: 
    struct HASH{
  template <class T1, class T2>
   size_t operator()(const pair<T1, T2>& p) const{
      auto hash1 = hash<T1>{}(p.first);
      auto hash2 = hash<T2>{}(p.second);
      return hash1 ^ hash2;
   }
};
    
public:
    bool isPathCrossing(string path) {
        unordered_map<pair<int,int>,int,HASH>mp;
        int sz=path.size();
        pair<int,int> cur={0,0};
        mp[cur]=1;
        for(int i=0;i<sz;i++){
            if(path[i]=='N') cur.first++;
            else if(path[i]=='S') cur.first--;
            else if(path[i]=='E') cur.second++;
            else if(path[i]=='W') cur.second--;
            if(mp[cur]==1) return 1;
            mp[cur]=1;
        }
        return 0;
    }
};
